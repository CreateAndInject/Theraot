<#@ template language="C#" #>// <auto-generated />
// Needed for NET40

// ReSharper disable RedundantLambdaSignatureParentheses

using System;

namespace Theraot.Core
{
    [System.Diagnostics.DebuggerNonUserCode]
    public static partial class FuncHelper
    {<#
    for (var indice = 0; indice < 17; indice++)
    {#>

        public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> GetDefaultFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>()
        {
            return HelperDefaultFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.Instance;
        }
<#
    }#><#
    for (var indice = 0; indice < 17; indice++)
    {#>

        public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>bool> GetFallacyFunc<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>()
        {
            return HelperFallacyFunc<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>.Instance;
        }
<#
    }#><#
    for (var indice = 0; indice < 17; indice++)
    {#>

        public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> GetReturnFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>(TReturn def)
        {
            return (<# if (indice != 0) { if (indice == 1) #>/*T*/ obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>/*T<#=subindice#>*/ arg<#=subindice#><#}}#>) => def;
        }
<#
    }#><#
    for (var indice = 0; indice < 17; indice++)
    {#>

        public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>bool> GetTautologyFunc<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>()
        {
            return HelperTautologyFunc<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>.Instance;
        }
<#
    }#><#
    for (var indice = 0; indice < 17; indice++)
    {#>

        public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> GetThrowFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>(Exception exception)
        {
            return (<# if (indice != 0) { if (indice == 1) #>/*T*/ obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>/*T<#=subindice#>*/ arg<#=subindice#><#}}#>) => throw exception;
        }
<#
    }#><#
    for (var indice = 0; indice < 17; indice++)
    {#>

        private static class HelperDefaultFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>
        {
            static HelperDefaultFunc()
            {
                Instance = DefaultFunc;
            }

            public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> Instance { get; }

<# if (indice != 0) {#>

<#
    }#>
            private static TReturn DefaultFunc(<# if (indice != 0) { if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
            {
                return default;
            }
        }
<#
    }#><#
    for (var indice = 0; indice < 17; indice++)
    {#>

        private static class HelperFallacyFunc<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>

        {
            static HelperFallacyFunc()
            {
                Instance = FallacyFunc;
            }

            public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>bool> Instance { get; }

<# if (indice != 0) {#>

<#
    }#>
            private static bool FallacyFunc(<# if (indice != 0) { if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
            {
                return false;
            }
        }
<#
    }#><#
    for (var indice = 0; indice < 17; indice++)
    {#>

        private static class HelperTautologyFunc<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>

        {
            static HelperTautologyFunc()
            {
                Instance = TautologyFunc;
            }

            public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>bool> Instance { get; }

<# if (indice != 0) {#>

<#
    }#>
            private static bool TautologyFunc(<# if (indice != 0) { if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
            {
                return true;
            }
        }
<#
    }#>    }
}
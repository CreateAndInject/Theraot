<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
Func<string, string> getOutputFile = (string inputFile) =>
{
    return inputFile.Substring(0, inputFile.Length - 5) + ".cs";
};

Func<string, string> getInputTest = (string inputFile) =>
{
    return System.Text.RegularExpressions.Regex.Replace(System.IO.File.ReadAllText(inputFile), @"\r\n|\n\r|\n|\r", "\r\n");
};

Action<string> exportNET20 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#undef NET_3_0");
    result.AppendLine("#undef NET_3_5");
    result.AppendLine("#undef NET_4_0");
    result.AppendLine("#undef NET_4_5");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET30 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#undef NET_3_5");
    result.AppendLine("#undef NET_4_0");
    result.AppendLine("#undef NET_4_5");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET35 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30 || NET35");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#undef NET_4_0");
    result.AppendLine("#undef NET_4_5");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET40 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30 || NET35 || NET40");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#undef NET_4_5");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET45 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30 || NET35 || NET40 || NET45");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#define NET_2_0");
    result.AppendLine("#define NET_3_0");
    result.AppendLine("#define NET_3_5");
    result.AppendLine("#define NET_4_0");
    result.AppendLine("#define NET_4_5");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

var directory = Path.GetDirectoryName(Host.TemplateFile);
var files = Directory.GetFiles(directory, "*.back", SearchOption.AllDirectories);
#>
// <auto-generated />
/*
The template throwback.tt is responsible of importing mono tests where the behaviour will not be fully backported.

Mono code is imported this way to minimize modification of the original code,
and therefore making it easier to update the imported code with a newer version if needed.

Mono code follows different code style and conventions than the rest of this project.
No effort will be done to make it match the style - because of the aforementioned reason.

The mono code is a copy taken from mono repositories at https://github.com/mono/mono

This template does not go to Internet, nor does copy text from outside of the current repository.

The code is taken from files with a special name convention - this files are included in the repository
and taking them from github.com/mono/mono is done manually.

The throwback files from mono must be named by the original name with the following modifications:
- Replace the extension ".cs" with ".back"
- Insert the last .NET version that did not include or need the imported code.

For example ExpressionTest_Quote.cs becomes ExpressionTest_Quote.net35.back because:
- It includes tests that will not work for .NET 4.0 - so it is a throwback - hence it says ".back"
- ExpressionTest_Quote will work for .NET 3.5 or prior so it says ".net35"

List of imported files:
<#
foreach (var file in files)
{
    if (file.EndsWith(".net20.back"))
    {
        exportNET20(file);
    }
    else if (file.EndsWith(".net30.back"))
    {
        exportNET30(file);
    }
    else if (file.EndsWith(".net35.back"))
    {
        exportNET35(file);
    }
    else if (file.EndsWith(".net40.back"))
    {
        exportNET40(file);
    }
    else if (file.EndsWith(".net45.back"))
    {
        exportNET45(file);
    }
    #><#=file.Substring(directory.Length)#>
<#
}
#>

*/
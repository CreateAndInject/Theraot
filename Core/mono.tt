<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
Func<string, string> getOutputFile = (string inputFile) =>
{
    return inputFile.Substring(0, inputFile.Length - 5) + ".cs";
};

Func<string, string> getInputTest = (string inputFile) =>
{
    return System.Text.RegularExpressions.Regex.Replace(System.IO.File.ReadAllText(inputFile), @"\r\n|\n\r|\n|\r", "\r\n");
};

Action<string> exportNET20 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#define NET_3_0");
    result.AppendLine("#define NET_3_5");
    result.AppendLine("#define NET_4_0");
    result.AppendLine("#define NET_4_5");
    result.AppendLine();
    result.AppendLine("using Theraot.Core;");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET30 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#define NET_3_5");
    result.AppendLine("#define NET_4_0");
    result.AppendLine("#define NET_4_5");
    result.AppendLine();
    result.AppendLine("using Theraot.Core;");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET35 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30 || NET35");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#define NET_4_0");
    result.AppendLine("#define NET_4_5");
    result.AppendLine();
    result.AppendLine("using Theraot.Core;");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET40 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30 || NET35 || NET40");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#define NET_4_5");
    result.AppendLine();
    result.AppendLine("using Theraot.Core;");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

Action<string> exportNET45 = (string inputFile) =>
{
    var outputFile = getOutputFile(inputFile);
    var result = new StringBuilder();
    result.AppendLine("#if NET20 || NET30 || NET35 || NET40 || NET45");
    result.AppendLine("// <auto-generated />");
    result.AppendLine();
    result.AppendLine("#define NET_2_0");
    result.AppendLine("#define NET_3_0");
    result.AppendLine("#define NET_3_5");
    result.AppendLine("#define NET_4_0");
    result.AppendLine("#define NET_4_5");
    result.AppendLine();
    result.AppendLine("using Theraot.Core;");
    result.AppendLine();
    result.AppendLine(getInputTest(inputFile));
    result.AppendLine();
    result.AppendLine("#endif");
    File.WriteAllText(outputFile, result.ToString());
};

var directory = Path.GetDirectoryName(Host.TemplateFile);
var files = Directory.GetFiles(directory, "*.net??.mono", SearchOption.AllDirectories);
#>
// <auto-generated />
/*
The template mono.tt is responsible of importing mono code.

Mono code is imported this way to minimize modification of the original code,
and therefore making it easier to update the imported code with a newer version if needed.

Mono code follows different code style and conventions than the rest of this project.
No effort will be done to make it match the style - because of the aforementioned reason.

The mono code is a copy taken from mono repositories at https://github.com/mono/mono

This template does not go to Internet, nor does copy text from outside of the current repository.

The code is taken from files with a special name convention - this files are included in the repository
and taking them from github.com/mono/mono is done manually.

The files from mono must be named by the original name with the following modifications:
- Replace the extension ".cs" with ".mono"
- Insert the last .NET version that did not include or need the imported code.

For example BigInteger.cs becomes BigInteger.net35.mono because:
- It is code from mono so it says ".mono"
- BigInteger was introduced in .NET 4.0 so the last version without it was .NET 3.5 so it says ".net35"

List of imported files:
<#
foreach (var file in files)
{
    if (file.EndsWith(".net20.mono"))
    {
        exportNET20(file);
    }
    else if (file.EndsWith(".net30.mono"))
    {
        exportNET30(file);
    }
    else if (file.EndsWith(".net35.mono"))
    {
        exportNET35(file);
    }
    else if (file.EndsWith(".net40.mono"))
    {
        exportNET40(file);
    }
    else if (file.EndsWith(".net45.mono"))
    {
        exportNET45(file);
    }
    #><#=file.Substring(directory.Length)#>
<#
}
#>

*/
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #><#+

    private string ConverterA(KeyValuePair<string, string> input)
    {
        return string.Format(CultureInfo.InvariantCulture, "{0}.{1}();", input.Key, input.Value);
    }

    private string ConverterB(string input)
    {
        return string.Format(CultureInfo.InvariantCulture, "{0} = null;", input);
    }

    private string Aggregate(IEnumerable<string> lines)
    {
        var sb = new StringBuilder();
        var first = true;
        foreach (var line in lines)
        {
            if (first)
            {
                first = false;
            }
            else
            {
                sb.Append("\n\r                        ");
            }
            sb.Append(line);
        }
        return sb.ToString();
    }

    public string getText
    (
        bool isInherited,
        bool isSealed,
        bool nonCritical,
        string namespaceName,
        string className,
        IEnumerable<KeyValuePair<string, string>> managedCalls,
        IEnumerable<KeyValuePair<string, string>> unmanagedCalls,
        IEnumerable<string> toSetToNull
    )
    {
        string path = Host.ResolvePath(@"..\..\..\..\SharedTemplates");
        if (!path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        {
            path += System.IO.Path.DirectorySeparatorChar.ToString();
        }
        string baseText;
        if (isInherited)
        {
            baseText = System.IO.File.ReadAllText(path + "InheritedDisposableTemplate.cs");
        }
        else
        {
            if (nonCritical)
            {
                baseText = System.IO.File.ReadAllText(path + "DisposableTemplate.cs");
            }
            else
            {
                baseText = System.IO.File.ReadAllText(path + "DisposableCriticalTemplate.cs");
            }
        }
        var converterA = new Converter<KeyValuePair<string, string>, string>(ConverterA);
        var converterB = new Converter<string, string>(ConverterB);
        var a = Aggregate(managedCalls.ToList().ConvertAll(converterA));
        var b = Aggregate(toSetToNull.ToList().ConvertAll(converterB));
        var c = Aggregate(unmanagedCalls.ToList().ConvertAll(converterA));
        var x = string.Format
        (
            baseText,
            namespaceName,
            className,
            className.Split('<')[0],
            isSealed ? "sealed partial" : "partial",
            isSealed ? "private" : "protected virtual",
            isSealed ? "private" : "protected",
            a.Length == 0 ? "//Empty" :  a,
            b.Length == 0 ? "//Empty" :  b,
            c.Length == 0 ? "//Empty" :  c
        );
        return x;
    }
#>
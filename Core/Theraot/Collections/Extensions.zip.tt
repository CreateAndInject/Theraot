<#@ template language="C#" #>// <auto-generated />

using System;
using System.Collections.Generic;

using Theraot.Core;

namespace Theraot.Collections
{
    public static partial class Extensions
    {<#
    for (var indice = 2; indice < 17; indice++)
    {#>

        public static IEnumerable<TReturn> Zip<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>(<# if (indice != 0) { if (indice == 1) #>IEnumerable<T> obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>IEnumerable<T<#=subindice#>> arg<#=subindice#><#}}#>, Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> resultSelector)
        {
<#
        for (var subindice = 1; subindice <= indice; subindice++)
        {#>
            var _<#=subindice#> = Check.NotNullArgument(arg<#=subindice#>, "arg<#=subindice#>");
<#
        }#>
            var _result = Check.NotNullArgument(resultSelector, "resultSelector");
<#
        for (var subindice = 1; subindice <= indice; subindice++)
        {#>
            using (var enumerator<#=subindice#> = _<#=subindice#>.GetEnumerator())
<#
        }#>
            {
                while
                (
<#
        for (var subindice = 1; subindice <= indice; subindice++)
        {#>
                    <#= subindice == 1 ? "" : "&& " #>enumerator<#=subindice#>.MoveNext()
<#
        }#>
                )
                {
                    yield return _result
                    (
<#
        for (var subindice = 1; subindice <= indice; subindice++)
        {#>
                        enumerator<#=subindice#>.Current<#= subindice == indice ? "" : "," #>
<#
        }#>
                    );
                }
            }
        }
<#
    }#>    }
}
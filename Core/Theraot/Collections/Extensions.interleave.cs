// <auto-generated />

using System;
using System.Collections.Generic;

using Theraot.Core;

namespace Theraot.Collections
{
    public static partial class Extensions
    {
        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var _10 = Check.NotNullArgument(arg10, "arg10");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            using (var enumerator10 = _10.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var _10 = Check.NotNullArgument(arg10, "arg10");
            var _11 = Check.NotNullArgument(arg11, "arg11");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            using (var enumerator10 = _10.GetEnumerator())
            using (var enumerator11 = _11.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var _10 = Check.NotNullArgument(arg10, "arg10");
            var _11 = Check.NotNullArgument(arg11, "arg11");
            var _12 = Check.NotNullArgument(arg12, "arg12");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            using (var enumerator10 = _10.GetEnumerator())
            using (var enumerator11 = _11.GetEnumerator())
            using (var enumerator12 = _12.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var _10 = Check.NotNullArgument(arg10, "arg10");
            var _11 = Check.NotNullArgument(arg11, "arg11");
            var _12 = Check.NotNullArgument(arg12, "arg12");
            var _13 = Check.NotNullArgument(arg13, "arg13");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            using (var enumerator10 = _10.GetEnumerator())
            using (var enumerator11 = _11.GetEnumerator())
            using (var enumerator12 = _12.GetEnumerator())
            using (var enumerator13 = _13.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13, IEnumerable<T> arg14)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var _10 = Check.NotNullArgument(arg10, "arg10");
            var _11 = Check.NotNullArgument(arg11, "arg11");
            var _12 = Check.NotNullArgument(arg12, "arg12");
            var _13 = Check.NotNullArgument(arg13, "arg13");
            var _14 = Check.NotNullArgument(arg14, "arg14");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            using (var enumerator10 = _10.GetEnumerator())
            using (var enumerator11 = _11.GetEnumerator())
            using (var enumerator12 = _12.GetEnumerator())
            using (var enumerator13 = _13.GetEnumerator())
            using (var enumerator14 = _14.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                    if (enumerator14.MoveNext())
                    {
                        yield return enumerator14.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13, IEnumerable<T> arg14, IEnumerable<T> arg15)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var _10 = Check.NotNullArgument(arg10, "arg10");
            var _11 = Check.NotNullArgument(arg11, "arg11");
            var _12 = Check.NotNullArgument(arg12, "arg12");
            var _13 = Check.NotNullArgument(arg13, "arg13");
            var _14 = Check.NotNullArgument(arg14, "arg14");
            var _15 = Check.NotNullArgument(arg15, "arg15");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            using (var enumerator10 = _10.GetEnumerator())
            using (var enumerator11 = _11.GetEnumerator())
            using (var enumerator12 = _12.GetEnumerator())
            using (var enumerator13 = _13.GetEnumerator())
            using (var enumerator14 = _14.GetEnumerator())
            using (var enumerator15 = _15.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                    if (enumerator14.MoveNext())
                    {
                        yield return enumerator14.Current;
                        ok = true;
                    }
                    if (enumerator15.MoveNext())
                    {
                        yield return enumerator15.Current;
                        ok = true;
                    }
                }
            }
        }

        public static IEnumerable<T> Interleave<T>(IEnumerable<T> arg1, IEnumerable<T> arg2, IEnumerable<T> arg3, IEnumerable<T> arg4, IEnumerable<T> arg5, IEnumerable<T> arg6, IEnumerable<T> arg7, IEnumerable<T> arg8, IEnumerable<T> arg9, IEnumerable<T> arg10, IEnumerable<T> arg11, IEnumerable<T> arg12, IEnumerable<T> arg13, IEnumerable<T> arg14, IEnumerable<T> arg15, IEnumerable<T> arg16)
        {
            var _1 = Check.NotNullArgument(arg1, "arg1");
            var _2 = Check.NotNullArgument(arg2, "arg2");
            var _3 = Check.NotNullArgument(arg3, "arg3");
            var _4 = Check.NotNullArgument(arg4, "arg4");
            var _5 = Check.NotNullArgument(arg5, "arg5");
            var _6 = Check.NotNullArgument(arg6, "arg6");
            var _7 = Check.NotNullArgument(arg7, "arg7");
            var _8 = Check.NotNullArgument(arg8, "arg8");
            var _9 = Check.NotNullArgument(arg9, "arg9");
            var _10 = Check.NotNullArgument(arg10, "arg10");
            var _11 = Check.NotNullArgument(arg11, "arg11");
            var _12 = Check.NotNullArgument(arg12, "arg12");
            var _13 = Check.NotNullArgument(arg13, "arg13");
            var _14 = Check.NotNullArgument(arg14, "arg14");
            var _15 = Check.NotNullArgument(arg15, "arg15");
            var _16 = Check.NotNullArgument(arg16, "arg16");
            var ok = true;
            using (var enumerator1 = _1.GetEnumerator())
            using (var enumerator2 = _2.GetEnumerator())
            using (var enumerator3 = _3.GetEnumerator())
            using (var enumerator4 = _4.GetEnumerator())
            using (var enumerator5 = _5.GetEnumerator())
            using (var enumerator6 = _6.GetEnumerator())
            using (var enumerator7 = _7.GetEnumerator())
            using (var enumerator8 = _8.GetEnumerator())
            using (var enumerator9 = _9.GetEnumerator())
            using (var enumerator10 = _10.GetEnumerator())
            using (var enumerator11 = _11.GetEnumerator())
            using (var enumerator12 = _12.GetEnumerator())
            using (var enumerator13 = _13.GetEnumerator())
            using (var enumerator14 = _14.GetEnumerator())
            using (var enumerator15 = _15.GetEnumerator())
            using (var enumerator16 = _16.GetEnumerator())
            {
                while (ok)
                {
                    ok = false;
                    if (enumerator1.MoveNext())
                    {
                        yield return enumerator1.Current;
                        ok = true;
                    }
                    if (enumerator2.MoveNext())
                    {
                        yield return enumerator2.Current;
                        ok = true;
                    }
                    if (enumerator3.MoveNext())
                    {
                        yield return enumerator3.Current;
                        ok = true;
                    }
                    if (enumerator4.MoveNext())
                    {
                        yield return enumerator4.Current;
                        ok = true;
                    }
                    if (enumerator5.MoveNext())
                    {
                        yield return enumerator5.Current;
                        ok = true;
                    }
                    if (enumerator6.MoveNext())
                    {
                        yield return enumerator6.Current;
                        ok = true;
                    }
                    if (enumerator7.MoveNext())
                    {
                        yield return enumerator7.Current;
                        ok = true;
                    }
                    if (enumerator8.MoveNext())
                    {
                        yield return enumerator8.Current;
                        ok = true;
                    }
                    if (enumerator9.MoveNext())
                    {
                        yield return enumerator9.Current;
                        ok = true;
                    }
                    if (enumerator10.MoveNext())
                    {
                        yield return enumerator10.Current;
                        ok = true;
                    }
                    if (enumerator11.MoveNext())
                    {
                        yield return enumerator11.Current;
                        ok = true;
                    }
                    if (enumerator12.MoveNext())
                    {
                        yield return enumerator12.Current;
                        ok = true;
                    }
                    if (enumerator13.MoveNext())
                    {
                        yield return enumerator13.Current;
                        ok = true;
                    }
                    if (enumerator14.MoveNext())
                    {
                        yield return enumerator14.Current;
                        ok = true;
                    }
                    if (enumerator15.MoveNext())
                    {
                        yield return enumerator15.Current;
                        ok = true;
                    }
                    if (enumerator16.MoveNext())
                    {
                        yield return enumerator16.Current;
                        ok = true;
                    }
                }
            }
        }
    }
}
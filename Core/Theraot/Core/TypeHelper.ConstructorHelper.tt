<#@ template language="C#" #>// <auto-generated />
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Text;

namespace Theraot.Core
{
    public static partial class TypeHelper
    {<#
    for (var indice = 0; indice < 17; indice++)
    {#>

        public static TReturn Create<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>(<# if (indice != 0) { if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
        {
            if (ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.HasConstructor)
            {
                return ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.InvokeConstructor(<# if (indice != 0) { if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}}#>);
            }
            else
            {
                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture, "There is no constructor for {0} with <# if (indice == 0) {#>no type arguments.<# } else { if (indice == 1) #>the type argument {1}<# else {#>the type arguments <# for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>{<#=subindice#>}<#}}}#>", typeof(TReturn)<# if (indice != 0)#>, <# { if (indice == 1) #>typeof(T).Name<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>typeof(T<#=subindice#>).Name<#}}#>));
            }
        }

        public static TReturn CreateOrDefault<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>(<# if (indice != 0) { if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
        {
            return ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.CreateOrDefault(<# if (indice != 0) { if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#> arg<#=subindice#><#}}#>);
        }

        public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> GetCreate<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>()
        {
            if (ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.HasConstructor)
            {
                return ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.Create;
            }
            else
            {
                throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture, "There is no constructor for {0} with <# if (indice == 0) {#>no type arguments.<# } else { if (indice == 1) #>the type argument {1}<# else {#>the type arguments <# for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>{<#=subindice#>}<#}}}#>", typeof(TReturn)<# if (indice != 0)#>, <# { if (indice == 1) #>typeof(T).Name<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>typeof(T<#=subindice#>).Name<#}}#>));
            }
        }

        public static bool TryGetCreate<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>(out Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> create)
        {
            if (ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.HasConstructor)
            {
                create = ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.Create;
                return true;
            }
            else
            {
                create = null;
                return false;
            }
        }

        public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> GetCreateOrDefault<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>()
        {
            return ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.CreateOrDefault;
        }

        public static bool HasConstructor<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>()
        {
            return ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>.HasConstructor;
        }

        private static class ConstructorHelper<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>
        {
            private static readonly ConstructorInfo constructorInfo;
            private static readonly Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> create;
            private static readonly Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> createOrDefault;

            static ConstructorHelper()
            {
                Type[] typeArguments = <# if (indice == 0) {#>Type.EmptyTypes<#} else {#>new Type[] { <# if (indice == 1) #>typeof(T)<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>typeof(T<#=subindice#>)<#}#> }<#}#>;
                constructorInfo = typeof(TReturn).GetConstructor(typeArguments);
                create = InvokeConstructor;
                if (HasConstructor)
                {
                    createOrDefault = FuncHelper.GetDefaultFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>();
                }
                else
                {
                    createOrDefault = create;
                }
            }

            public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> Create
            {
                get
                {
                    return create;
                }
            }

            public static Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> CreateOrDefault
            {
                get
                {
                    return createOrDefault;
                }
            }

            public static bool HasConstructor
            {
                get
                {
                    return constructorInfo != null;
                }
            }

            public static TReturn InvokeConstructor(<# if (indice != 0) { if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
            {
                if (constructorInfo == null)
                {
                    throw new InvalidOperationException(string.Format(CultureInfo.InvariantCulture, "There is no constructor for {0} with <# if (indice == 0) {#>no type arguments.<# } else { if (indice == 1) #>the type argument {1}<# else {#>the type arguments <# for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>{<#=subindice#>}<#}}}#>", typeof(TReturn)<# if (indice != 0)#>, <# { if (indice == 1) #>typeof(T).Name<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>typeof(T<#=subindice#>).Name<#}}#>));
                }
                else
                {
                    <# if (indice == 0) { #>return (TReturn)constructorInfo.Invoke(_emptyObjects);<# } else { #>return (TReturn)constructorInfo.Invoke(new object[]{<# if (indice != 0) { if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}}#>});<# } #>

                }
            }
        }
<#
    }#>
    }
}
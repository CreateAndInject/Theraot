// <auto-generated />

using System;

namespace Theraot.Core
{
    internal interface IErsatz<out T>
    {
        T Result
        {
            get;
        }

        object InvokeAction();
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<TReturn>: IErsatz<TReturn>
    {
        private readonly Func<TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<TReturn> target)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke()
        {
            _result = _target.Invoke();
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T, TReturn> target, T obj)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T obj)
        {
            _result = _target.Invoke(obj);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, TReturn> target, T1 arg1, T2 arg2)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2)
        {
            _result = _target.Invoke(arg1, arg2);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, TReturn> target, T1 arg1, T2 arg2, T3 arg3)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3)
        {
            _result = _target.Invoke(arg1, arg2, arg3);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(Invoke);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCode]
    public class ErsatzFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>: IErsatz<TReturn>
    {
        private readonly Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> _target;
        private TReturn _result;

        public ErsatzFunc(Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn> target, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TReturn>();
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13, T14 arg14, T15 arg15, T16 arg16)
        {
            _result = _target.Invoke(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
        }

        object IErsatz<TReturn>.InvokeAction()
        {
            return new Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(Invoke);
        }
    }
}